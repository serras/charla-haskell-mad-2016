\documentclass{beamer}
\usetheme{metropolis}

\usepackage[utf8]{inputenc}
\usepackage{epiolmec}

\title{Buenos tipos para el desarrollo web}
\date{29 de febrero de 2016}
\author{Alejandro Serrano}
\institute{Haskell-MAD}

%include lhs2TeX.fmt
%include lhs2TeX.sty
%include polycode.fmt

%format :/: = ": \! \! / \! \! :"
%format :+: = ": \! \! + \! \! :"
%format family = "\mathbf{family}"
%format // = "/ \! /"
%format :<|> = ": \! \! \langle | \rangle"
%format :> = ": \! >"
%format <$> = "~\langle \! \$ \! \rangle~"
%format <*> = "~\langle \! * \! \rangle~"
%format flu = "` \!"

\begin{document}
\maketitle

\section{¿De qué va esta charla?}

\section{Una pausa para la publicidad}

\begin{frame}[fragile]
\frametitle{Hola, me llamo Alejandro}
\begin{columns}
\column{0.55\textwidth}
\begin{itemize}
\item Nací y he crecido en Madrid
\item Comencé a interesarme por Haskell allá por el 2009
\item He participado dos veces en el Google Summer of Code mejorando el soporte de Haskell para Eclipse y Emacs
\item El año pasado publiqué un libro, \emph{Beginning Haskell}
\end{itemize}
\column{0.45\textwidth}
\includegraphics[scale=0.2]{libro.jpg}
\end{columns}
\end{frame}

\begin{frame}[fragile]
\frametitle{Vivo en Utrecht (Países Bajos)}
\begin{columns}
\column{0.45\textwidth}
\begin{itemize}
\item En la Universidad tienen un grupo especializado en prog. funcional
\item Me fui de Erasmus en 2010/11 para aprender
\item Y ahora vivo allí y me estoy doctorando :)
\end{itemize}
\column{0.55\textwidth}
\includegraphics[scale=0.2]{utrecht.jpg}
\end{columns}
\

Todos los veranos organizamos un curso de 2 semanas: \\
\emph{\Large Applied Functional Programming} \\
(este año es del 4 al 15 de julio)
\end{frame}

\section{Jugando con tipos (sin quemarnos)}

%1
\begin{frame}[fragile]
\frametitle{Tipos de datos algebraicos}
\begin{code}
data Numero   =  Cero
              |  Suc Numero

data Arbol a  =  Hoja a
              |  Nodo (Arbol a) a (Arbol a)
\end{code}
\begin{verbatim}
*Charla> :t Suc (Suc Cero)
Suc (Suc Cero) :: Numero
*Charla> :t Nodo (Hoja 'a') 'b' (Hoja 'c')
Nodo (Hoja 'a') 'b' (Hoja 'c') :: Arbol Char
\end{verbatim}
\end{frame}

%2
\begin{frame}[fragile]
\frametitle{Declarando el tipo de los constructores}
\begin{code}
data Numero   =  Cero |  Suc Numero

data Arbol a  =  Hoja a |  Nodo (Arbol a) a (Arbol a)
\end{code}
\begin{code}
{-# LANGUAGE GADTs #-}

data Numero where
  Cero  ::            Numero
  Suc   :: Numero ->  Numero

data Arbol a where
  Hoja  :: a                        -> Arbol a
  Nodo  :: Arbol a -> a -> Arbol a  -> Arbol a
\end{code}
\end{frame}

%3
\begin{frame}[fragile]
\frametitle{Describiendo campos de una tabla}
\begin{code}
data CampoUsuario where
  Nombre     :: String            -> CampoUsuario
  Apellidos  :: String            -> CampoUsuario
  Edad       :: Integer           -> CampoUsuario
  Direccion  :: String -> String  -> CampoUsuario
\end{code}

\pause
¿Qué tipo le damos a la siguiente función?
\vspace{-0.2cm}
\begin{verbatim}
*Charla> getCampoUsuario (Nombre "Alejandro")
"Alejandro" :: String
*Charla> getCampoUsuario (Edad 27)
27          :: Integer
\end{verbatim}
\end{frame}

%4
\begin{frame}[fragile]
\frametitle{ADTs generalizados (GADTs)}
Los constructores pueden \emph{especializar} el tipo que construyen
\begin{code}
data CampoUsuario a where
  Nombre     :: String            -> CampoUsuario String
  Apellidos  :: String            -> CampoUsuario String
  Edad       :: Integer           -> CampoUsuario Integer
  Direccion  :: String -> String  -> CampoUsuario (String, String)
\end{code}\vspace{0.001cm}

\pause
Ahora ya podemos tipar la función correctamente :)
\begin{code}
getCampoUsuario :: CampoUsuario t -> t
\end{code}
\end{frame}

%5
\begin{frame}[fragile]
\frametitle{Asegurando estáticamente la validación}
Con el ánimo alto, decidimos usar esta técnica para diferenciar cadenas HTML validadas y no validadas contra inyección de código
\vspace{-0.7cm}
\begin{itemize}
\item Esta técnica se denomina \emph{tipos fantasma} (\emph{phantom types})
\end{itemize}
\begin{code}
data CadenaHTML v where
  NoV  :: String -> CadenaHTML NoValidada
  V    :: String -> CadenaHTML Validada

-- Con esto eliminamos los elementos dudosos
escapar:: CadenaHTML NoValidada -> CadenaHTML Validada
-- Sólo podemos mostrar cadenas escapadas
mostrar :: CadenaHTML Validada -> HTML
\end{code}
\end{frame}

%6
\begin{frame}[fragile]
\frametitle{¿De dónde sacamos los índices?}
Una opción es definir tipos de datos vacíos
\begin{code}
{-# LANGUAGE EmptyDataDecls #-}
data NoValidada
data Validada
\end{code}
El problema es que sólo |NoValidada| y |Validada| tienen sentido como índices de |CadenaHTML|, pero GHC no restringe ese hecho
\begin{verbatim}
*Charla> :k CadenaHTML Bool
CadenaHTML Bool :: *
\end{verbatim}
\end{frame}

%7
\begin{frame}[fragile]
\frametitle{Por los cerros de ÚbeKa}
Los \emph{kinds} son los tipos de los tipos
\vspace{-0.2cm}
\begin{itemize}
\item El kind |*| es el de los tipos de valores
\begin{verbatim}
*Charla> :k Integer
Integer :: *
*Charla> :k CadenaHTML Validada
CadenaHTML Validada :: *
\end{verbatim}
\item Los constructores de tipo tienen un kind con flechas
\begin{verbatim}
*Charla> :k Arbol
Arbol :: * -> *
*Charla> :k CadenaHTML
CadenaHTML :: * -> *
\end{verbatim}
\end{itemize}

\end{frame}

%8
\begin{frame}[fragile]
\frametitle{Promocionando tipos}
En GHC podemos pedir que por cada tipo de datos se genere un nuevo kind con un habitante por constructor
\begin{code}
{-# LANGUAGE DataKinds, KindSignatures #-}
data EstadoValidacion = Validada | NoValidada

data CadenaHTML (v :: EstadoValidacion) where ...
\end{code}\vspace{-0.3cm}
Es \emph{como si} pudiésemos usar valores en los índices

\pause
\begin{verbatim}
*Charla> :k CadenaHTML Bool
<interactive>:1:12:
    The first argument of 'CadenaHTML'
      should have kind 'EstadoValidacion',
      but 'Bool' has kind '*'
\end{verbatim}
\end{frame}

%9
\begin{frame}[fragile]
\frametitle{Listas indizadas por longitud}
¿Cómo definimos este tipo de datos?
\begin{verbatim}
*Charla> :t 'a' :/: 'b' :/: 'c' :/: Fin
'a' :/: 'b' :/: 'c' :/: Fin
  :: Lista ('Suc ('Suc ('Suc 'Cero))) Char
\end{verbatim}

\pause
Usando GADTs con un tipo promocionado de índice
\begin{code}
data Numero = Cero | Suc Numero

infixr 8 :/:
data Lista (n :: Numero) e where
  Fin    ::                    Lista Cero     e
  (:/:)  :: e -> Lista n e ->  Lista (Suc n)  e
\end{code}
\end{frame}

%10
\begin{frame}[fragile]
\frametitle{Tipando algunas funciones}
\begin{code}
primero :: Lista (Suc n) e -> e
-- primero Fin     = ??
primero (e :/: _)  = e
\end{code}
\vspace{-0.5cm}
\pause
\begin{small}
\begin{verbatim}
*Charla> head []
*** Exception: Prelude.head: empty list
*Charla> primero Fin
<interactive>:27:9:
    Couldn't match type 'Cero with 'Suc n0
\end{verbatim}
\end{small}
\pause
\begin{code}
unir :: Lista n e -> Lista m e -> Lista ?? e
unir Fin        lst = lst
unir (e :/: r)  lst = e :/: unir r lst
\end{code}
\end{frame}

%11
\begin{frame}[fragile]
\frametitle{Los tipos también forman familias}
Una \emph{familia de tipos} es una función a nivel de tipos
\begin{code}
type family n :+: m where
  Cero   :+: m  = m
  Suc n  :+: m  = Suc (n :+: m)
\end{code}
Ahora sí que podemos darle un tipo a |unir|
\begin{code}
unir :: Lista n e -> Lista m e -> Lista (n :+: m) e
\end{code}
\pause
Nótese que GHC no conoce ninguna propiedad aritmética
\begin{code}
unir :: Lista n e -> Lista m e -> Lista (m :+: n) e
\end{code}\vspace{-0.9cm}
\begin{verbatim}
Charla.hs:
    Could not deduce (m ~ (m :+: 'Cero))
Charla.hs:
    Could not deduce ((m :+: 'Suc n) ~ 'Suc (m :+: n))
\end{verbatim}
\end{frame}

%12
\begin{frame}[fragile]
\frametitle{Tipos asociados}
Las familias de tipos también pueden aparecer \emph{asociadas} a clases
\vspace{-.2cm}
\begin{itemize}
\item En ese caso forman una familia \emph{abierta}
\end{itemize}
\begin{code}
class Coleccion c where
  type Elemento c
  vacio  :: c
  (//)   :: Elemento c -> c -> c

instance Coleccion [e] where
  type Elemento [e] = e
  vacio  = []
  (//)   = (:)

instance Coleccion IntSet where
  type Elemento IntSet = Int
  ...
\end{code}
\end{frame}

%13
\begin{frame}[fragile]
\frametitle{En resumen}
Haskell tiene un gran soporte para programación a nivel de tipo
\begin{itemize}
\item Los \emph{kinds} son los tipos de los tipos
\item Podemos crear nuevos kinds por \emph{promoción}
\item Y definir funciones sobre tipos usando \emph{familias}
\item Los \emph{GADTs} nos permiten refinar el tipo de los constructores
\end{itemize}
Tipos más concretos = más errores capturados al compilar
\end{frame}

%14
\begin{frame}[fragile]
\frametitle{¿Qué no puedo hacer en Haskell?}
Los valores pasados a una función \emph{no pueden influenciar} su tipo
\begin{itemize}
\item No puedo escribir una función que dado un número |n| y un valor |v|, devuelva una |Lista n e| repitiendo en valor |v|
\item Existen dos mundos separados: valores y tipos/kinds/\dots
\item De ahí que sea necesaria la promoción
\end{itemize}
\end{frame}

%15
\begin{frame}[fragile]
\frametitle{Tipos dependientes}
Los sistemas de \emph{tipos dependientes} eliminan esa barrera\vspace{-0.2cm}
\begin{itemize}
\item Algunos lenguajes que los soportan son {\bf Idris}, Agda y Coq
\item Ojo, son lenguajes experimentales
\end{itemize}
Además, se pueden usar para \emph{probar} propiedades de los programas\vspace{-0.2cm}
\begin{itemize}
\item Por ejemplo, |invertir (invertir lst) = lst|
\end{itemize}
\begin{code}
repetir : (n : Numero) -> e -> Lista n e
repetir Cero     x = Fin
repetir (Suc n)  x = x :/: repetir n x
\end{code}
\end{frame}

%16
\begin{frame}[fragile]
\frametitle{Estoy en ascuas, quiero saber más}
Vídeos (los podéis encontrar en YouTube)
\begin{itemize}
\item \emph{Depending on Types} de Stephanie Weirich
\begin{itemize}
\item \emph{Keynote} de ICFP 2014
\end{itemize}
\item \emph{A practical intro to Haskell GADTs} de Richard Eisenberg
\begin{itemize}
\item Parte de LambdaConf (este año en mayo)
\end{itemize}
\item \emph{Adventures with Types} de Simon Peyton Jones
\begin{itemize}
\item Un conjunto de charlas sobre el sistema de tipos de Haskell
\end{itemize}
\end{itemize}

Libros (perfectos para leer en el tren)
\begin{itemize}
\item \emph{Beginning Haskell}, por supuesto :P
\item \emph{Type-Driven Development with Idris} de Edwin Brady
\end{itemize}
\end{frame}

\section{¡Desarrollo web!}

\section{Un poco de relax con JSON}

%17
\begin{frame}[fragile]
\frametitle{JSON está por todas partes}
En estos tiempos modernos, no hay aplicación web que se precie que no consuma y genere JSON (aunque sea un poquito)
\begin{itemize}
\item JSON = Javascript Object Notation
\begin{verbatim}
{
  "nombre"    : "Alejandro",
  "apellidos" : "Serrano Mena"
  "edad"      : 27
}
\end{verbatim}
\item Trabajar con JSON es tedioso y propenso a errores tontos
\end{itemize}
\pause
Esta parte va sobre cómo \emph{no} escribir código que trate JSON
\begin{itemize}
\item Las mejores líneas de código son las que no escribes ;)
\end{itemize}
\end{frame}

%18
\begin{frame}[fragile]
\frametitle{Esón, padre de Jasón}
{\tt aeson} es el estándar de facto para trabajar con JSON en Haskell
\begin{verbatim}
{
  "nombre"    : "Alejandro",
  "apellidos" : "Serrano Mena"
  "edad"      : 27
}
\end{verbatim}
\begin{code}
{-# LANGUAGE OverloadedStrings #-}
object  [ "nombre"     .= String "Alejandro"
        , "apellidos"  .= String "Serrano Mena"
        , "edad"       .= Number 27 ]
\end{code}
\end{frame}

%19
%\begin{frame}[fragile]
%\frametitle{Representando JSON}
%{\tt aeson} utiliza un tipo de dato muy simple que representa todas las posibilidades del lenguaje JSON
%\begin{itemize}
%\item Tan pequeño que cabe en una diapositiva
%\end{itemize}
%\begin{code}
%data Value   =  Object  Object
%             |  Array   Array
%             |  String  Text
%                        -- Un String más eficiente
%             |  Number  Scientific
%                        -- Un número de precisión arbitraria
%             |  Bool    Bool
%             |  Null
%type Array   =  Vector Value
%type Object  =  HashMap Text Value
%\end{code}
%\end{frame}

%19
\begin{frame}[fragile]
\frametitle{De tu tipo a JSON y viceversa}
Es preferible, no obstante, trabajar con tus propios tipos de datos
\begin{itemize}
\item Si trabajamos con |Value| directamente, perdemos las ventajas de un tipado fuerte
\item En la frontera de nuestra aplicación con el mundo exterior, no queda más remedio que convertir de y a JSON
\end{itemize}
\begin{code}
class ToJSON where
  toJSON     :: a -> Value

class FromJSON where
  parseJSON  :: Value -> Parser a
             -- Parser es como un Maybe más informativo
\end{code}
\end{frame}

%20
\begin{frame}[fragile]
\frametitle{Tedio, aburrimiento, sopor}
\begin{code}
data Persona  = Persona  { nombre      :: String
                         , apellidos   :: String
                         , edad        :: Integer }
              deriving (Eq, Show)

instance ToJSON Persona where
  toJSON (Persona n a e) = object  [ "nombre"     .= n
                                   , "apellidos"  .= a
                                   , "edad"       .= e ]
instance FromJSON Persona where
  parseJSON v = ...
\end{code}
¡Y esto por cada tipo de datos en tu aplicación!
\end{frame}

%21
\begin{frame}[fragile]
\frametitle{Derivación genérica al rescate}
\begin{code}
{-# LANGUAGE DeriveGeneric #-}
import Data.Aeson
import GHC.Generics

data Persona  = Persona { ... }
              deriving (Eq, Show, Generic)

instance ToJSON Persona
instance FromJSON Persona
\end{code}
¡No es necesario escribir más código!
\begin{itemize}
\item Las instancias se derivan de la propia declaración de tipo
\item Los nombre de campos se usan como claves
\end{itemize}
\end{frame}

\section{Hora de un merecido descanso}

\section{Sirviendo con Servant}

%1
\begin{frame}[fragile]
%\frametitle{A}
\begin{block}
{\LARGE La API de tu aplicación web es su \emph{tipo}}
\end{block}
\pause
\begin{itemize}
\item Especifica el contrato y los formatos aceptados por cada ruta
\item Independientemente de la conversión y el transporte
\item Una misma API da lugar a diferentes implementaciones
\begin{itemize}
\item Servidor
\item Cliente
\item Documentación
\end{itemize}
\end{itemize}
\end{frame}

%2
\begin{frame}[fragile]
\frametitle{Ejemplo: un servicio de contadores}
\begin{itemize}
\item {\tt PUT /new}: genera un nuevo contador
\begin{itemize}
\item El cuerpo de la llamada indica el nombre del contador
\item Devuelve un identificador numérico
\end{itemize}
\item {\tt POST /step/:id}: aumenta en uno el contador
\item {\tt GET /value/:id}: obtiene el valor del contador
\item {\tt GET /list}: lista los contadores
\begin{itemize}
\item Opcionalmente puede llevar un parámetro {\tt order} que indica si ordenar por orden creciente o decreciente de valor
\end{itemize}
\end{itemize}
\end{frame}

%3
\begin{frame}[fragile]
\frametitle{Nuestro tipo-API}
\begin{code}
type NewAPI     = "new"    :> ReqBody flu[PlainText] Text
                           :> Put   flu[JSON] CounterId
type StepAPI    = "step"   :> Capture "id" CounterId
                           :> Post  flu[JSON] Integer
type ValueAPI   = "value"  :> Capture "id" CounterId
                           :> Get   flu[JSON] Integer
type ListAPI    = "list"   :> QueryParam "order" Order
                           :> Get   flu[JSON] [Counter]

type AppAPI     = NewAPI :<|> StepAPI :<|> ValueAPI :<|> ListAPI
\end{code}
\end{frame}

%4
\begin{frame}[fragile]
\frametitle{Locura en los tipos}
Se usan muchísimos tipos promocionados
\begin{itemize}
\item Cadenas a nivel de tipo, cuyo kind es |Symbol|
\item Listas a nivel de tipo, encabezadas por |flu|
\begin{itemize}
\item Por ejemplo, |flu[Int, String] :: flu[*]|
\item Nótese la diferencia entre |[String]| y |flu[String]|
\end{itemize}
\end{itemize}
\end{frame}

%5
\begin{frame}[fragile]
\frametitle{Construyendo rutas}
%Hay dos combinadores básicos al definir un tipo-API
\begin{itemize}
\item |:<||>| combina rutas para construir una aplicación
\item |:>| combina segmentos para construir una ruta
\end{itemize}
Hay multitud de posibilidades para un segmento
\begin{itemize}
\item |"cadena"| indica un segmento que ha de aparecer literalmente
\item Hay varias formas de capturar información
\begin{itemize}
\item |Capture "campo" Tipo| indica que lo que aparezca en ese segmento estará disponible luego bajo el nombre |campo|
\item |ReqBody flu[Formatos] Tipo| indica que el cuerpo de la petición contendrá un valor serializado en uno de los formatos indicados
\item |QueryParam "campo" Tipo| se usa para {\tt ?campo=valor}
\end{itemize}
\item |Verbo flu[Formatos] Tipo| indica una acción HTTP
\begin{itemize}
\item Por ejemplo |Get|, |Post|, |Put|, |Delete| o |Patch|
\item Tal acción tendrá como resultado un valor del tipo mencionado
\item Que puede ser servido en uno de los formatos indicados
\end{itemize}
\end{itemize}
\end{frame}

%6
\begin{frame}[fragile]
\frametitle{Preparando el percal}
\begin{code}
type CounterId = Integer
data Counter = Counter { counterId    :: CounterId
                       , counterName  :: Text
                       , counterValue :: Integer }
             deriving (Eq, Show, Generic)
instance FromJSON Counter
instance ToJSON Counter
\end{code}
\end{frame}

%7
\begin{frame}[fragile]
\frametitle{Cómo mantener el estado de la aplicación}
Para guardar el estado de la aplicación vamos a usar STM
\begin{itemize}
\item STM = \emph{Memoria Software Transaccional}
\item |TVar| = variable con acceso arbitrado transaccionalmente
\item Protección frente acceso concurrente
\end{itemize}
Su uso es {\bf muy} sencillo
\begin{itemize}
\item Creamos |TVar|s con |newTVar| o |newTVarIO|
\item Escribimos {\it scripts} transaccionales dentro de la mónada |STM|
\begin{itemize}
\item Usando |readTVar|, |writeTVar| o |modifyTVar|
\end{itemize}
\item Ejecutamos un {\it script} usando |atomically|
\end{itemize}
\end{frame}

%8
\begin{frame}[fragile]
\frametitle{Implementando un trocito de API}
Para servir |API| tenemos que implementar un valor |Server API|
\begin{itemize}
\item |Server| es una familia de tipos que indica qué necesitamos definir para servir una ruta
\item Todas las variables capturadas se convierten en argumentos
\item Este servicio vive en el paquete {\tt servant-server}
\end{itemize}
\vspace{-0.3cm}
\begin{verbatim}
*Charla> :kind! Server NewAPI
Server NewAPI :: *
= Text -> EitherT ServantErr IO Integer
\end{verbatim}
\vspace{-0.3cm}
\begin{itemize}
\item En un servidor podemos ejecutar acciones |IO|
\begin{itemize}
\item Tenemos que usar |liftIO| para ello
\end{itemize}
\end{itemize}
\end{frame}

%9
\begin{frame}[fragile]
\frametitle{Haskell es el mejor lenguaje imperativo}
\begin{code}
type Estado = (TVar CounterId, TVar [Counter])

servirNewAPI :: Estado -> Server NewAPI
servirNewAPI (ultimoId, lista) nombre = liftIO $
  atomically $ do  modifyTVar ultimoId (+1)
                   nuevoId <- readTVar ultimoId
                   let c = Counter nuevoId nombre 0
                   modifyTVar lista (c :)
                   return nuevoId
\end{code}
\end{frame}

%10
\begin{frame}[fragile]
\frametitle{Ejecutando el servidor}
Usando |serve| convertimos un |Server| en una |Application| de WAI
\begin{itemize}
\item WAI = Web Application Interface
\item Protocolo común a todas las aplicaciones web Haskell
\begin{itemize}
\item Similar a servlets de Java o a WSGI para Python
\end{itemize}
\end{itemize}
Para correr una |Application| necesitamos un {\it runner}
\begin{itemize}
\item Warp es el más común y funciona muy bien
\end{itemize}
\pause
\begin{code}
servidor :: Estado -> Application
servidor s = serve (Proxy :: Proxy NewAPI) (servirNewAPI s)

main :: IO ()
main = do  estado <- (,) <$> newTVarIO 0 <*> newTVarIO []
           run 8081 (servidor estado)
\end{code}
\end{frame}

%11
\begin{frame}[fragile]
\frametitle{Implementando el listado de contadores}
\begin{code}
servirListAPI :: Estado -> Server ListAPI
servirListAPI (_, lista) _ = liftIO $ readTVarIO $ lista

servidor :: Estado -> Application
servidor s = serve  (Proxy :: Proxy (NewAPI :<|> ListAPI))
                    (servirNewAPI s :<|> servirListAPI s)
\end{code}
\pause
{\Large No sé a vosotros, a mí esto me parece \emph{magia}}~~\EOstarWarrior
\end{frame}

%12
\begin{frame}[fragile]
\frametitle{Devolviendo HTML}
Ahora queremos devolver HTML además de JSON
\begin{enumerate}
\item Añadir el nuevo formato a la lista de |Get|
\begin{code}
type ListAPI    = "list"   :> QueryParam "order" Order
                           :> Get   flu[JSON, HTML] [Counter]
\end{code}
\item Implementar la conversión a |HTML| mediante |ToHtml|
\begin{code}
instance ToHtml [Counter] where
  toHtml = ...
\end{code}
\end{enumerate}
\end{frame}

%13
\begin{frame}[fragile]
\frametitle{Generando HTML con Haskell}
Hay 3 grandes posturas para generar HTML
\begin{itemize}
\item Un lenguaje de \emph{templates} ajeno a Haskell
\begin{itemize}
\item Por ejemplo, {\tt mustache}
\end{itemize}
\item Un lenguaje integrado en Haskell (un DSL)
\begin{itemize}
\item Por ejemplo, {\tt blaze-html} y {\tt lucid}
\item Si preferimos usar Markdown, {\tt markdown}
\end{itemize}
\item Un término medio: un lenguaje ajeno a Haskell que en tiempo de \emph{compilación} se convierte en llamadas a una librería
\begin{itemize}
\item Usando \emph{quasi-quotating} para parsear
\item {\tt shakespeare} es el mayor exponente
\end{itemize}
\end{itemize}
\end{frame}

%14
\begin{frame}[fragile]
\frametitle{Generando HTML con {\tt lucid}}
\begin{itemize}
\item Los elementos y atributos son funciones
\begin{itemize}
\item El nombre es el mismo que en HTML más |_|
\end{itemize}
\item El contenido de una etiqueta o el valor de un atributo se da como \emph{argumento} de la función
\item Los atributos de una etiqueta como una lista
\item Si dentro de un elemento hay varios elementos, se puede usar
\begin{itemize}
\item El combinador monoidal |<>|
\item Notación monádica con |do|
\end{itemize}
\end{itemize}
\begin{columns}
\column{0.5\textwidth}
\begin{code}
div_ [class_ "info"] $ do
  p_ (strong_ "Lugar")
  p_ "Haskell-MAD"
\end{code}
\column{0.5\textwidth}
\begin{verbatim}
<div class="info">
  <p><strong>Lugar</strong></p>
  <p>Haskell-MAD</p>
</div>
\end{verbatim}
\end{columns}
\end{frame}

%15
\begin{frame}[fragile]
\frametitle{Ventajas de ser una mónada}
\begin{code}
{-# LANGUAGE FlexibleInstances #-}

import Lucid

instance ToHtml [Counter] where
  toHtml cs =  ul_ $ forM_ cs $ \(Counter _ nm v) -> do
                 li_ $ do  strong_  (toHtml nm)
                           toHtml ":"
                           toHtml (show v)
\end{code}
\end{frame}

%16
\begin{frame}[fragile]
\frametitle{Generando HTML con {\tt shakespeare}}
\begin{verbatim}
{-# LANGUAGE QuasiQuotes #-}

import Text.Blaze
import Text.Hamlet

instance ToMarkup [Counter] where
  toMarkup cs = [shamlet|
<ul>
  $forall c <- cs
    <li>
      <strong>#{counterName c}
      : #{counterValue c} |]
\end{verbatim}
\end{frame}

\section{Bases de datos}

%17
\begin{frame}[fragile]
\frametitle{Tres enfoques}
\begin{columns}
\column{0.4\textwidth}
Una BBDD particular
\begin{itemize}
\item {\tt postgres-simple}
\item {\tt mysql-simple}
\item {\tt sqlite}
\item {\tt mongoDB}
\item {\tt hedis}
\item {\tt rethinkdb}
\end{itemize}
\column{0.5\textwidth}
Basadas en álgebra relacional
\begin{itemize}
\item HaskellDB
\item HaSQL
\end{itemize}

\

``ORM funcionales''
\begin{itemize}
\item {\bf Persistent}
\item Groundhog
\end{itemize}
\end{columns}
\end{frame}

%18
\begin{frame}[fragile]
\frametitle{Primer paso: el esquema}
\begin{scriptsize}
\begin{code}
{-# LANGUAGE TemplateHaskell, QuasiQuotes #-}
{-# LANGUAGE GADTs, TypeFamilies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
\end{code}
\end{scriptsize}
\vspace{-0.9cm}
\begin{code}
mkPersist sqlSettings [persistLowerCase|
Usuario json
  nombre     String
  apellidos  String
  NombreCompleto nombre apellidos
  deriving Show
Contador json
  nombre   String
  valor    Int
  usuario  UsuarioId
  deriving Show |]
\end{code}
\end{frame}

%19
\begin{frame}[fragile]
\frametitle{¿Qué hay en un esquema?}
Cada elemento del esquema es una \emph{entidad}, compuesta por:
\begin{itemize}
\item Una clave primaria siempre presente
\begin{itemize}
\item Cuyo tipo por defecto se denomina {\tt EntidadId}
\end{itemize}
\item Un conjunto de \emph{campos}: {\tt nombreCampo TipoCampo}
\item Un conjunto de \emph{criterios de unicidad}: \\
{\tt NombreCriterio campo1 campo2 ...}
\end{itemize}
\end{frame}

%20
\begin{frame}[fragile]
\frametitle{Mirando debajo de la manta: {\tt -ddump-splices}}
\begin{small}
\begin{code}
data Contador
  = Contador {  contadorNombre   :: !String,
                contadorValor    :: !Int,
                contadorUsuario  :: !(Key Usuario) }
  deriving (Show, FromJSON, ToJSON)

type ContadorId = Key Contador

instance PersistEntity Contador where
  data Unique Contador
  newtype Key Contador
    = ContadorKey { unContadorKey :: BackendKey SqlBackend }
  data EntityField Contador where
    ContadorId       :: EntityField Contador (Key Contador)
    ContadorNombre   :: EntityField Contador String
    ContadorValor    :: EntityField Contador Int
    ContadorUsuario  :: EntityField Contador (Key Usuario)
\end{code}
\end{small}
\end{frame}

%21
\begin{frame}[fragile]
\frametitle{Ejecutando una transacción}
\begin{itemize}
\item Las transacciones se definen en la mónada |SqlPersistT|
\begin{itemize}
\item Una transacción es independiente del {\it back-end}
\end{itemize}
\item La ejecución de una consulta depende de la BBDD
\begin{itemize}
\item Diferentes librerías como {\tt persistent-sqlite}
\item Normalmente es posible usar un {\it pool} de conexiones
\end{itemize}
\end{itemize}
\begin{code}
servirListAPI :: ConnectionPool -> Server ListAPI
servirListAPI pool _ = liftIO $
  flip runSqlPersistMPool pool $ do
    -- Aquí va la transacción SQL

main :: IO ()
main = runNoLoggingT $
  withSqlitePool "contadores.db" 10 $ \pool ->
    NoLoggingT $ run 8081 (servidor pool)
\end{code}
\end{frame}

%22
\begin{frame}[fragile]
\frametitle{Inserción}

\end{frame}

%23
\begin{frame}[fragile]
\frametitle{Consulta por identificador}

\end{frame}

%24
\begin{frame}[fragile]
\frametitle{Consulta por datos}

\end{frame}

\section{Vamos a ir acabando\dots}

\begin{frame}[fragile]
\frametitle{Conclusión}

\end{frame}

\begin{frame}[fragile]
\frametitle{Para saber más}

\end{frame}

\section{¡Mil gracias!}

\end{document}
